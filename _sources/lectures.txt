.. _lectures:

Lectures
########

.. raw:: html

   <h3>CS 855: Development of High-Assurance Software Systems</h3>



Course Administration
********************************

.. _lecture-course-overview:

**Lecture: Course Administration**

This lecture provides a slide-based walkthrough of the course syllabus.  It describes the course policies, means of delivering course content, evaluation methods, grading scale, etc.

* Slides (`.pdf <http://pub.santoslab.org/high-assurance/module-intro/slides/INTRO-00-Course-Administration-2021.pdf>`__)

**Lecture: Course Overview**

This lecture provides an overview of the course content, homework themes, and course projects. 

* Slides (`.pdf <http://pub.santoslab.org/high-assurance/module-intro/slides/INTRO-01-Course-Overview-2021.pdf>`__)


Safety Critical Systems Concepts
********************************

.. _lecture-intro-control-loops-temp-controller:

**Lecture: Control Loop Basics illustrated with Temperature Controller Example**

This lecture introduces concepts associated with "control loops" -- a
foundational concept in the design and implementation of embedded
systems and safety-critical systems.  A control loop consists of the
"real-world 
thing" that the system is trying to control (the controlled process),
the controller (i.e., software/hardware that makes decisions about how
to control the controlled process), sensors (used by the controller to get
"readings" the real-world state of the controlled process), and
actuators (used by the controller to change the state of the
controlled process in some way).  The lecture briefly discusses how
requirements engineering and safety reasoning relate to control loops.

* Slides (`.pdf <http://pub.santoslab.org/high-assurance/module-intro/slides/INTRO-01-Temp-Control-Control-Loops.pdf>`__)
* Video (`.mp4 <http://pub.santoslab.org/high-assurance/module-intro/videos/INTRO-Control-Loop-Concepts.mp4>`__)
* Study Guide (`.txt
  <http://pub.santoslab.org/high-assurance/module-intro/study-guides/INTRO-01-Temp-Control-Control-Loops-study-guide.txt>`__)
  


AADL
********************************

.. _lecture-aadl-overview:

**Lecture: AADL Overview**

This presentation by Dr. Sam Procter from the Software Engineering Institute describes
AADL, its use in industry, and some of the ongoing research projects that AADL. **NOTE**:  Dr. Procter is
a PhD graduate from SAnToS Lab/KSU, and he first learned about AADL in this course!

* Video (`YouTube <https://www.youtube.com/watch?v=CTm87h7tyWc&feature=emb_logo>`__)
  

.. _lecture-aadl-modeling-software:

**Lecture: AADL: Modeling Embedded Software**

This lecture covers the basic aspects of modeling embedded software with AADL using the temperature controller example.  The lecture includes concepts related to AADL thread, process, and system components, AADL port-based communication, and AADL packages.  The lecture scope is tailored to the subset of AADL supported by HAMR code generation.  This material provides the basis for follow-on tool tutorials that use the AADL OSATE environment to develop simple system software models.

* Slides (`.pdf <http://pub.santoslab.org/high-assurance/module-hamr/slides/HAMR-AADL-Modeling-Software.pdf>`__)
* Video (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/HAMR-AADL-Modeling-Software.mp4>`__)

HAMR - A model-driven development environment for embedded systems that uses AADL
**********************************************************************************

.. _lecture-hamr-overview:

**Lecture: HAMR Overview (Parts 1, 2, 3)**

This is a three part lecture that provides an overview of the HAMR
model-driven development tool for AADL (HAMR stands for "High Assurance Modeling and Rapid Engineering for Embedded Systems").
This lecture should be watched before moving on to other HAMR-related lectures.
 
* Part 1: Provides the overall motivation and scope for HAMR, and covers how HAMR uses AADL.
* Part 2: Illustrates programming HAMR-generated components/systems in Slang (a high-assurance subset of Scala), which can be integrated with Scala and Java and deployed on the JVM (or alternatively, pure Slang can be compiled to C).  This lecture also illustrates a variety of HAMR/Slang-related capabilities such as unit testing, run-time monitoring, and fault injection.
* Part 3: Illustrates programming HAMR-generated components/systems in C for deployment on Linux or the seL4 micro-kernel.


* Slides (`Part 1 .pdf <http://pub.santoslab.org/high-assurance/module-hamr/slides/HAMR-Overview-Part-1.pdf>`__, `Part 2 .pdf <http://pub.santoslab.org/high-assurance/module-hamr/slides/HAMR-Overview-Part-2-Slang.pdf>`__)
* Video (`Part 1 .mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/HAMR-Overview-Part-1.mp4>`__, `Part 2 .mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/HAMR-Overview-Part-2-Slang.mp4>`__)

.. _tutorial-installation:

**Tool Tutorial: HAMR Installation**

This video covers installation of the HAMR tool following the options of a direct install (as opposed to the virtual machine option) and using the Formal Methods Integrated Development Environment (FMIDE) customization of the OSATE AADL editor (as opposed to installing HAMR in the "regular" OSATE distribution).  Instructions for other types of installation can be found on the HAMR website.  Also, this video addresses installation of the tools needed for Slang development of HAMR-generated components.  The HAMR website explains how to extend this installation with the tools needed for C development of HAMR-generated components.

* Video (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-Installation.mp4>`__)
* HAMR `Installation Instructions <http://hamr.sireum.org/hamr-doc/ch0X-hamr-installation.html>`__

.. _tutorial-osate-workspace-concepts:

**Tool Tutorial: AADL OSATE Workspace Concepts**

The OSATE AADL editor is based on Eclipse, and it uses the Eclipse "workspace" concept to manage AADL project files.   This video gives an overview of the workspace concept and recommendations for how to use workspaces in the context of HAMR development.  You should follow these recommendations when working with HAMR AADL models in this tutorial series.

* Video (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-OSATE-Workspace-Concepts.mp4>`__)
* Slides (`.pdf <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-OSATE-Workspace-Concepts.pdf>`__)

.. _tutorial-aadl-project-importing:

**Tool Tutorial: Loading an Existing AADL Project into OSATE/FMIDE**

You will often (in the course of these lectures/tutorials or in the course of team development) be given an existing AADL project to work with in the OSATE AADL editor.  This tutorial explains how you load existing AADL projects into OSATE and it illustrates some basic OSATE navigation of an AADL model.

* Video (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-AADL-Project-Importing.mp4>`__)
* Example Files: `HAMR-Slang-Tutorials-Example-00.zip <http://pub.santoslab.org/high-assurance/module-hamr/videos/HAMR-Slang-Tutorials-Example-00.zip>`__

.. _tutorial-slang-project-opening:

**Tool Tutorial: Loading an Generated/Existing HAMR Slang Project into the IntelliJ-based Sireum IVE**

Given an AADL model, HAMR can generate a HAMR Slang project with AADL run-time infrastructure and component code skeletons that you add application code to to get a complete system.  This video explains how you open a HAMR Slang project in the Sireum IVE (a customization of IntelliJ).  These instructions also apply to opening existing HAMR Slang projects that are distributed in the HAMR Slang tutorials.   The tutorial addresses the basic structure of HAMR Slang projects, notes the use of the Scala Build Tool (SBT) to manage project builds, describes basic correspondences between HAMR generated Slang code and AADL models, describes how to compile and run a HAMR Slang project, how to run unit tests.  The tutorial concludes with an initial discussion of project files that should be not checked into git and other source code repositories.  

* Video (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-Slang-Project-Opening.mp4>`__)
* Example Files: Use HAMR-Slang-Tutorials-Example-00.zip from above.  If you have already downloaded, no need to download again.

.. _tutorial-aadl-refactoring:

**Tool Exercise: Refactoring an AADL Model to Remove Ports and Change Port Categories**

This is an *exercise* designed for you to complete on your own following the provided instructions.  A solution video is provided that is meant to be used help you resolve any difficulties encountered when trying to do the exercise on your own.  

In this exercise, you will carry out a simple refactoring of some of the component ports in the Temperature Control example.  You will start from the AADL model in the HAMR-Slang-Tutorials-Example-00.zip that you imported into OSATE in the tutorials above.   This refactoring will involve changing the kinds of ports and connections used to communicate temperature information from the sensor to the controller (and to the operator interface). This will require changing the AADL thread component types for TempSensor , TempController , and OperatorInterface components, as well as making some simple changes to corresponding AADL flow specifications. By performing this refactoring, you will gain an initial understanding of
(a) AADL architecture models (basic ideas of ports and connections) and (b) using the OSATE editor to make simple edits in the AADL graphical and textual views.

* Exercise instructions (`.pdf <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-AADL-Refactor.pdf>`__)
* Example Files: Use the OSATE import of the HAMR-Slang-Tutorials-Example-00.zip from above.  
* Solution explanation video: (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-AADL-Refactor.mp4>`__)

.. _tutorial-slang-refactoring:

**Tool Exercise: Refactoring a Slang Implementation of an AADL System**

This is an *exercise* designed for you to complete on your own following the provided instructions.  A solution video is provided that is meant to be used help you resolve any difficulties encountered when trying to do the exercise on your own.  

This exercise is designed to help you learn the basics of using HAMR to generate Slang implementations of AADL-based systems, Slang thread component application logic, and Slang port-communication APIs.

In this exercise, you will carry out a simple refactoring of some of the Slang application code in the Temperature Control example.  This builds on a refactoring of the original Temperature Control AADL model carried out in a previous exercise.  In that exercise you changed the kinds of ports and connections used to communicate temperature information from the sensor to the controller (and to the operator interface).  In this exercise, you will regenerate the Slang code from the refactored AADL model.  This will keep most of the existing code, but it will change the Slang APIs associated with your component ports to align with the refactored models.   This will leave the Slang code with some syntax errors because the old application code will not completely match the newly regenerated APIs for port communication.   To address this, you will then need to make some small changes in the Slang component application code to match the new version of the generated port APIs.  You will confirm that your refactored code is working correctly by compiling and running it with the SBT build file in IntelliJ.

This exercise is meant to start from the state of your AADL models and Slang code from previous exercises.  However, if you don't have your files in a proper state, the .zip file below contains both AADL models and Slang code in the correct state for starting the exercise.  You will need to import these files into OSATE and Sireum IVE (see the exercise description).

* Exercise instructions (`.pdf <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-Slang-Refactor.pdf>`__)
* .zip file artifacts starting point: (`.zip <http://pub.santoslab.org/high-assurance/module-hamr/videos/HAMR-Slang-Tutorials-Example-00-AADL-Refactored.zip>`__)
* Solution explanation video: (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-Slang-Refactor.mp4>`__)

  * 0:00 - Overview
  * 15:23 - Loading AADL and Slang projects from provide zip file (optional -- only needed if you are not starting from the results of previous exercises)
  * 19:48 - Confirming code is ready for exercise; hints about what will change in code; building existing project before refactoring
  * 23:04 - Explanation of how code generation avoids overwriting existing application files but does generate new infrastructure files
  * 26:06 - Code Generation
  * 38:54 - Compile and Observe Errors
  * 40:42 - Refactor the TempSensor Compute Entry Point Code
  * 44:30 - Refactor the TempSensor Initialize Entry Point Code
  * 48:18 - Recompile and Observe Errors (some eliminated)
  * 45:50 - Refactor the Message Handlers in the TempControl Compute Entry Point
  * 55:55 - Recompile and Observe Errors (more eliminated)
  * 57:20 - Refactor the OperatorInterface Compute Entry Point
  * 59:08 - Recompile (No Errors)
  * 59:50 - Refactor TempControl Unit Tests
  * 1:03:40 - Run Unit Tests
  * 1:04:40 - Run System


.. _tutorial-aadl-project-from-scratch:

**Tool Exercise: Creating an AADL Model from Scratch**

This is an *exercise* designed for you to complete on your own following the provided instructions.  A solution video is provided that is meant to be used help you resolve any difficulties encountered when trying to do the exercise on your own.  

In this exercise, you will create an AADL model of a simple producer/consumer system.  This will cover creation of AADL packages (with imports), threads, processes, systems, and a struct-based data type.   The solution video also illustrates the OSATE content assist facility and creation of AADL graphical model diagrams from the completed textual model.  

To assist you in completing this exercise and subsequent AADL modeling activities, you are provided with a collection of AADL templates (in a text file) that you can cut/paste into OSATE using your favorite text editor.

* Exercise instructions (`.pdf <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-AADL-Project-from-Scratch.pdf>`__)
* AADL Template File: (`.txt <http://pub.santoslab.org/high-assurance/module-hamr/videos/AADL-HAMR-templates-manual.txt>`__)
* Solution explanation video: (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-AADL-Project-from-Scratch.mp4>`__)

  * 0:00 - Overview
  * 7:43 File System - HAMR Project Directory Hierarchy Creation
  * 11:52 OSATE - AADL New Project Creation
  * 16:39 Discussion: Top-down vs Bottom-up Model Creation
  * 18:22 OSATE - Creation of Producer Package Skeleton
  * 27:04 OSATE - Creation of ProdCons (system-level) Package and Message Data Type
  * 32:50 OSATE - Creation of Producer Artifacts
  * 37:55 Discussion: OSATE Content Assist
  * 50:05 OSATE - Creation of Consumer Artifacts
  * 56:00 OSATE - Creation of System Component
  * 1:01:45 OSATE - Instance Model Creation
  * 1:03:48 OSATE - Diagram Creation


.. _tutorial-slang-project-from-scratch:

**Tool Exercise: Creating a HAMR Slang Project from Scratch**

This is an *exercise* designed for you to complete on your own following the provided instructions.  A solution video is provided that is meant to be used help you resolve any difficulties encountered when trying to do the exercise on your own.  

In the previous exercise "Creating an AADL Model from Scratch", you created an AADL model of a simple producer/consumer system.  In this exercise, you will build a Slang-based implementation of the system that will run on the JVM.  This will help you learn how to prepare your directory structure for HAMR Slang code generation, invoke the HAMR code generator to generate Slang code from an AADL model, code simple application logic (for the Producer and Consumer threads, in this example), and compile and run the system.

This exercise is meant to start from the state of your AADL models in the previous "Creating an AADL Model from Scratch" exercise.  However, if you don't have your files in a proper state, the HAMR-Slang-Tutorials-Prod-Cons-AADL-only.zip file below contains  AADL Producer/Consumer model (essentially the model-solution for the previous exercise).  These are in the correct state for starting the exercise.  You will need to import these files into OSATE following the steps that you took in the exercise "Loading an Existing AADL Project into OSATE/FMIDE".

* Exercise instructions (`.pdf <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-Slang-Project-from-Scratch.pdf>`__)
* .zip file artifacts starting point: (`.zip <http://pub.santoslab.org/high-assurance/module-hamr/videos/HAMR-Slang-Tutorials-Prod-Cons-AADL-only.zip>`__)
* Solution explanation video: (`.mp4 <http://pub.santoslab.org/high-assurance/module-hamr/videos/Tutorial-Slang-Project-from-Scratch.mp4>`__)

  * 0:00 - Overview, Background, and Preparation
  * 4:10 - Ensure that the file system has the proper structure for a HAMR Slang project
  * 6:43 - Confirm AADL Model is Ready for Slang Code Generation
  * 8:03 - Generate Code (and explanation of structure of HAMR Slang generated code (around 13:22))
  * 17:58 - Open Slang Project in the Sireum IVE (IntelliJ)
  * 20:42 - Compile
  * 22:40 - Run Skeleton Code
  * 23:50 - Discussion: Explanation of Behavior of Skeleton Code (with intuition about AADL semantics)
  * 32:37 - Provide Slang Declarations of Producer Component Local State Variables (with discussion about understanding/using the Slang types generated from AADL types, special formatting of literals)
  * 47:25 - Implement Producer Initialize Entry Point (with discussion of standard structure for initialize entry point: initializing component local variables, and putting initial values on output data ports)
  * 54:04 - Implement Producer Compute Entry Point (with discussion of calling constructors for Slang representations of AADL-derived types, using output port APIs, using Slang if-statements, other AADL entry points)
  * 1:09:08 - Compile and Run (with explanation of logging output when we have a completed producer but are still using the auto-generated template for the consumer)
  * 1:12:43 - Provide Slang Declarations of Consumer Component Local State Variables
  * 1:15:18 - Implement Consumer Initialize Entry Point
  * 1:15:57 - Implement Consumer Compute Entry Point (with a discussion of the semantics of AADL HAMR event handlers around 1:17:45, discussion of example API usage 1:20:54, discussion of coding the entry point 1:22:50)
  * 1:29:17 - Compile and Run (with a discussion of understanding the output of the completed system)
  * 1:31:37 - Conclusion


----

Lectures from Previous Semesters
#################################

::

   The lectures from previous semesters are provided below as a resource.
   
----

.. raw:: html

  <hr>

  <h1>Course Overview and Introduction to Safety Concepts</h1>
  <ul>
  <li> Isolette: A Simple Safety Critical System 
  <ul>

  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-intro/slides/INTRO-01-Isolette.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-intro/videos/INTRO-01-Isolette.mov">.mov)</a></li>
  <li> Study Guide: (<a href="http://pub.santoslab.org/high-assurance/module-intro/study-guides/INTRO-01-Isolette--study-guide.txt">.txt)</a></li>
  </ul>
  <li> Differences between Conventional Development and Development of Safety-Critical Systems</li>
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-intro/slides/INTRO-03-Safety-Critical-Development.pdf">.pdf)</a></li>
  <li> Reading: Hatcliff et al. "Certifiably Safe Software-Dependent Systems: Challenges and Directions", Future of Software Engineering 2014, at the International Conference on Software Engineering  (Section 2.2) (<a href="http://santoslab.org/pub/high-assurance/module-intro/reading/Hatcliff-al-ICSE-FOSE-2014-Certification.pdf">.pdf</a>)
  </ul>
  <li> Basic Safety-Related Terminology</li>
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-intro/slides/INTRO-02-Safety-Terminology.pdf">.pdf)</a></li>
  <li> Reading: Hatcliff et al. "Certifiably Safe Software-Dependent Systems: Challenges and Directions", Future of Software Engineering 2014, at the International Conference on Software Engineering  (Sections 1,2.1) (<a href="http://santoslab.org/pub/high-assurance/module-intro/reading/Hatcliff-al-ICSE-FOSE-2014-Certification.pdf">.pdf</a>)
  <li> Study Guide: (<a href="http://pub.santoslab.org/high-assurance/module-intro/study-guides/INTRO-02-Safety-Terminology--study-guide.txt">.txt)</a></li>
  </ul>
  </ul>

  <hr>

  <h2>Requirements Management for Safety Critical Systems</h2>

  <h3>General Reading</h3>
  <ul>
  <li>FAA Requirements Engineering Management Handbook (<a href="http://pub.santoslab.org/high-assurance/module-requirements/reading/FAA-DoT-Requirements-AR-08-32.pdf">.pdf</a>)</li>
  </ul>

  <h3>Lectures</h3>
  <ul>
  <li> Introduction to Requirements
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/Module-Req-00-Requirements-Intro.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/Module-Req-00-Requirements-Intro.mov">.mov)</a></li>
  </ul>
  <li> FAA REMH Overview
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-00-Overview.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/FAA-REMH-00-Overview.mov">.mov)</a></li>
  </ul>
  <li> FAA REMH: System Overview
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-01-System-Overview.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/FAA-REMH-01-System-Overview.mov">.mov)</a></li>
  <li> Supplement: Advice and common pitfalls (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-01-System-Overview--advice.pdf">.pdf</a>,<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/FAA-REMH-01-System-Overview--advice.mov">.mov</a>)
  </ul>

  <li> FAA REMH: Identify the System Boundary
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-02-Identify-the-System-Boundary.pdf">.pdf)
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/FAA-REMH-02-Identify-the-System-Boundary.mov">.mov)</a></li>
  </ul>

  <li> FAA REMH: Develop the Operational Concepts
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-03-Develop-the-Operational-Concepts.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/FAA-REMH-03-Develop-the-Operational-Concepts.mov">.mov)</a></li>
  <li> Additional lecture slides on details of use case writing based on Cockburn's <em>Writing Effective Use Cases</em>
  <ul>
  <li>Action Steps 
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/Module-Req-Use-Cases-Action-Steps.pdf">.pdf)</a>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/Module-Req-Use-Cases-Action-Steps.mp4">.mp4)</a>
  </ul>
  <li>Extensions  
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/Module-Req-Use-Cases-Extensions.pdf">.pdf)</a></a>
  </ul>


  </ul>
  </ul>

  <li> FAA REMH: Identify the Environment Assumptions
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-04-Identify-the-Environmental-Assumptions.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/FAA-REMH-04-Identify-the-Environmental-Assumptions.mov">.mov)</a></li>
  </ul>

  <li> FAA REMH: Develop the Functional Architecture
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-05-Develop-the-Functional-Architecture.pdf">.pdf)
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/videos/FAA-REMH-05-Develop-the-Functional-Architecture.mov">.mov)</a></li>
  </ul>

  <li> FAA REMH: Revise the Functional Architecture to Meet Implementation Constraints
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-06-Revise-the-Architecture-to-Meet-Implementation-Constraints.pdf">.pdf)</a></li>
  </ul>

  <li> FAA REMH: Identify the System Modes
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-07-Identify-the-System-Modes.pdf">.pdf)</a></li>
  </ul>

  <li> FAA REMH: Develop Detailed Requirements
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-08-Develop-Detailed-Requirements.pdf">.pdf)</a></li>
  </ul>

  <li> FAA REMH: Define the Software Requirements
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-requirements/slides/FAA-REMH-09-Define-the-Software-Requirements.pdf">.pdf)</a></li>
  </ul>
  </ul>

  <hr>

  <h2>PCA Pump Project</h2>

  <h3>Lectures</h3>
  <ul>
  <li> PCA Pump -- Introduction
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-pca-pump/slides/PCA-Pump--Intro.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-pca-pump/videos/PCA-Pump--Intro.mp4">.mp4)</a></li>
  </ul>
  <li> PCA Pump -- Architecture Overview
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-pca-pump/slides/PCA-Pump--Architecture-Overview.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-pca-pump/videos/PCA-Pump--Architecture-Overview.mp4">.mp4)</a></li>
  </ul>
  </ul>

  <hr>

  <h2>Modeling Safety-Critical Systems in the Architecture and Analysis Definition Language (AADL)</h2>

  <h3>Lectures</h3>
  <ul>
  <li> Modeling the Isolette in AADL
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-aadl/slides/AADL-Isolette.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-aadl/videos/AADL-Isolette.mov">.mov)</a></li>
  </ul>
  </ul>

  <hr>

  <h2>Risk Management</h2>
  <h3>General Reading</h3>
  <ul>
  <li>"Basic Concepts and Taxonomy of Dependable and Secure Computing", Algirdas Avizienis, Jean-Claude Laprie, Brian Randell, and Carl Landwehr  (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/Avizienis--Taxonomy.pdf">.pdf</a>)</li>
  <li>"Architecture Fault Modeling and Analysis with the AADL Error Modeling Annex v.2", Peter Feiler John Hudak Julien Delange David P. Gluch (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/AADL-EMv2-Feiler-etal-Architecture-Fault-Modeling-and-Analysis.pdf">.pdf</a>)</li>
  <li>"Illustrating the AADL Error Modeling Annex (v. 2) Using a Simple Safety-Critical Medical Device", Brian Larson, John Hatcliff, Kim Fowler, Julien Delange (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/hilt-2013-isolette-emv2.pdf">.pdf</a>)</li>
  </ul>

  <h3>Lectures</h3>
  <ul>
  <li> Functional Hazard Analysis (FuHA)
  <ul>
  <li> Reading:
  <ul>
  <li> Functional Hazard Analysis, Chapter 15, <em>Hazard Analysis Techniques for System Safety</em>, Clifton A. Ericson, II
  <li> <a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/FHA-AFI-RVSM-Altran.pdf">Functional Hazard Analysis -- real-life example from the AFI RVSM project (air traffic control), performed by Altran</a>
  <li> <a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/FHA-PSSA-EMMA-Thales.pdf">Functional Hazard Assessment and Preliminary Safety Assessment -- real-life example for A Generic Advanced Surface Movement, Guidance and Control System, performed by Thales</a>
  <li> <a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/FHA-New-Zealand-Air-Force.pdf">Functional Hazard Analysis What? The Why & How (slides from New Zealand Air Force)</a>
  </ul>
  </ul>
  <li> Fault Tree Analysis (FTA)
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/slides/RISK-MANAGEMENT--FTA.pdf">.pdf)</a></li>
  </ul>
  <li> Failure Modes, Criticality, and Effects Analysis (FMECA)
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/slides/FMECA-John-Hatcliff-part-a.pdf">.pdf)</a></li>
  </ul>
  <li> Event Tree Analysis (ETA)
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/slides/RISK-MANAGEMENT--ETA.pdf">.pdf)</a></li>
  </ul>
  <li> System-Theoretic Process Analysis (STPA)
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/slides/RISK-MANAGEMENT--STPA.pdf">.pdf)</a></li>
  <li> Reading:
  <ul>
  <li> <a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/STPA-Primer-v0.pdf">STPA Primer</li>
  <li> <a href="http://pub.santoslab.org/high-assurance/module-risk-management/reading/STPA-Balgos-MS-Thesis.pdf">Balgos, MS Thesis</a> -- A Systems Theoretic Application to Design for the Safety of Medical Diagnostic Devices</li>
  <li> <a href="http://pub.santoslab.org/igh-assurance/module-risk-management/reading/STPA-John-Thomas-PhD-Dissertation.pdf">Thomas, PhD Dissertation</a> -- Extending and Automating a Systems-theoretic Hazard Analysis for Requirements Generation and Analysis</li>
  </ul>
  </ul>
  </ul>

  <ul>
  <li> AADL EMv2 -- Introduction
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/slides/EMV2-Introduction.pdf">.pdf)</a></li>
  </ul>
  </ul>

  <ul>
  <li> AADL EMv2 -- Error Types and Library
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-risk-management/slides/EMV2-Error-Types-and-Library.pdf">.pdf)</a></li>
  </ul>
  </ul>

  <hr>

  <h2>Disaster Cast Podcast </h2>

  <h3>Instructions</h3>
  <ul>
  <li>Instructions for Disaster Cast notes (<a href="http://pub.santoslab.org/high-assurance/module-disaster-cast/disaster-cast-instructions.txt">.txt</a>)</li>
  </ul>

  <hr>

  <h2>Medical Application Platforms</h2>

  <h3>General Reading</h3>
  <ul>
  <li>John Hatcliff, Andrew King, Insup Lee, Alisdair Macdonald, Anura Fernando, Michael Robkin, Eugene Vasserman, Sandy Weininger, Julian Goldman. "Rationale and Architecture Principles for Medical Application Platforms", Proceedings of the 2012 International Conference on Cyber-Physical Systems, pp. 3-12, April, 2012. (<a href="http://people.cis.ksu.edu/~hatcliff/Medical-Application-Platforms.pdf">.pdf</a>)</li>
  </ul>


  <h3>Lectures</h3>
  <ul>
  <li> Introduction to Medical Application Platforms
  <ul>
  <li> Slides: (<a href="http://pub.santoslab.org/high-assurance/module-map/slides/01-MAP--Intro.pdf">.pdf)</a></li>
  <li> Video: (<a href="http://pub.santoslab.org/high-assurance/module-map/videos/01-MAP--Intro.mov">.mov)</a></li>
  </ul>
  </ul>


STM32 and FreeRTOS
********************************

.. _lecture-stm32-tool-chain-installation:

**Exercise: STM32 Tool Chain Installation and Blinking LED**

This exercise guides you through the installation of development tools
for STM32F4 Discovery Boards and construction of a simple FreeRTOS
task to blink one of the LEDs built into the Discovery  board.

* Exercise (`.pdf <http://pub.santoslab.org/high-assurance/module-stm32/CIS890-STM32-Tool-Chain-Installation-and-LED-Blink.pdf>`__)

Arduino
********************************

.. _lecture-arduino-tutorial-pdf:

**Arduino (Elegoo) Mega 2560 Tutorials**

This 225-page document provides 33 exercises to help you learn how to
program all of the different widges that come with the Arduino
(Elegoo) Mega 2560 kit that is required for the course (you can
purchase the  kit from `Amazon <https://www.amazon.com/gp/product/B01EWNUUUA/ref=ppx_yo_dt_b_asin_title_o01__o00_s00?ie=UTF8&psc=1>`__).

* Tutorial Document (`.pdf <http://pub.santoslab.org/high-assurance/module-arduino/Elegoo-Mega-2560-Tutorials.pdf>`__)

